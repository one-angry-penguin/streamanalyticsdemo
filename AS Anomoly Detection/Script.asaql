WITH getMachineRuns as (
    SELECT 
        input.RunTime AS RunTime,
        machineRuns.ArrayValue AS machineRun
    FROM input
    CROSS APPLY getarrayelements(input.machineRuns) as machineRuns
),
smoothing as (
    select  
        avg(cast(machineRun.failedOutput as Float)) AS failures,
        avg(cast(machineRun.completedOutput as Float)) AS capacity,
        LAST(machineRun.machine.broken) OVER (PARTITION BY machineRun.machine.id LIMIT DURATION(hour, 1)) AS broken,
        machineRun.machine.id AS machineId
    from getMachineRuns
    GROUP BY SlidingWINDOW(minute, 3),  machineRun.machine.id, LAST(machineRun.machine.broken) OVER (PARTITION BY machineRun.machine.id LIMIT DURATION(hour, 1))
),
detection AS (
    select  
        System.TimeStamp AS timeStamp,
        machineId,
        broken,
        failures,
        capacity,
        AnomalyDetection_SpikeAndDip(failures, 90, 2000, 'spikes') 
            OVER(PARTITION BY machineId LIMIT DURATION(hour, 8)) as ChangePointScore
    FROM smoothing
)
select 
    'anomalies' AS analysisType,
    timeStamp,
    machineId,
    broken,
    failures,
    capacity,
    CAST(GetRecordPropertyValue(ChangePointScore, 'Score') as float) as changePointScore,
    CAST(GetRecordPropertyValue(ChangePointScore, 'IsAnomaly') as bigint) as isChangePointAnomaly,
    CASE WHEN CAST(GetRecordPropertyValue(ChangePointScore, 'IsAnomaly') as bigint) = broken THEN 1 ELSE 0 END as correctDetection
INTO Output
FROM detection